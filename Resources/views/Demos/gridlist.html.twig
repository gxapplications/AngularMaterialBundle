{% extends "GXAngularMaterialBundle::base.html.twig" %}

{% block title %}GXAngularMaterialBundle:Demos:gridlist{% endblock %}

{% block stylesheets %}
	{# more on https://github.com/angular/bower-material/tree/master/themes #}
	<style type="text/css">
		.grid-container {
			position: absolute;
			top: 66px;
			left: 0;
			right: 10px;
			bottom: 0;
			overflow: auto;
		}
		.grid {
			position: relative;
			height: 100%;
			list-style: none;
			/* Will be modified by the grid jquery lib, depending on the items */
			-webkit-transition: width 0.2s,
			height 0.2s;
			transition: width 0.2s,
			height 0.2s;
		}
		.grid li {
			position: absolute;
			z-index: 1;
			font-weight: bold;
			line-height: 4em;
			text-align: center;
			cursor: pointer;
			-webkit-transition: top 0.2s,
			left 0.2s,
			width 0.2s,
			height 0.2s,
			font-size 0.2s,
			line-height 0.2s;
			transition: top 0.2s,
			left 0.2s,
			width 0.2s,
			height 0.2s,
			font-size 0.2s,
			line-height 0.2s;
		}
		.grid li .inner {
			position: absolute;
			background: #fff;
			border: 1px solid #bbb;
			top: 0;
			bottom: 10px;
			left: 10px;
			right: 0;
			-webkit-transition: background 3s;
			transition: background 3s;
		}
		.grid li.changed .inner {
			background: #ffff66;
			-webkit-transition: none;
			transition: none;
		}
		.grid li.ui-draggable-dragging {
			-webkit-transition: none;
			transition: none;
		}
		.grid li.position-highlight {
			-webkit-transition: none;
			transition: none;
		}
		.grid li.position-highlight .inner {
			border: none;
			background: #ccc;
		}
		.grid .controls {
			position: absolute;
			top: 0;
			right: 0;
			float: right;
			font-size: 0.4em;
			font-weight: normal;
			line-height: 1em;
			opacity: 0;
			-webkit-transition: opacity 0.2s;
			transition: opacity 0.2s;
		}
		.grid .controls .resize {
			font-size: 0.6em;
			float: left;
			margin: 5px 5px 0 0;
			padding: 0.3em;
			background: #fafafa;
			color: #444;
			text-decoration: none;
		}
		.grid .controls .resize:hover {
			background: #f1f1f1;
		}
		.grid li:hover .controls {
			opacity: 1;
		}
	</style>
{% endblock %}

{% block body %}
	<h1>Welcome to the Demos:gridlist page</h1>
	<div class="demo-content ng-scope">
		<div ng-controller="AppCtrl">
			<a href="#remove-row" class="button remove-row">-</a>
			<a href="#add-row" class="button add-row">+</a>
			<hr />

			<div class="grid-container">
				<ul id="grid" class="grid">
					<li class="position-highlight">
						<div class="inner">MOUAHAHAHAH</div>
					</li>
				</ul>
			</div>

		</div>
	</div>
{% endblock %}



{% block javascripts %}
	<script>
		function compileAngularElement(elSelector) {
			var elSelector = (typeof elSelector == 'string') ? elSelector : null ;
			// The new element to be added
			if (elSelector != null ) {
				var $div = $( elSelector );
				// The parent of the new element
				var $target = $("[ng-app]");
				angular.element($target).injector().invoke(['$compile', function ($compile) {
					var $scope = angular.element($target).scope();
					$compile($div)($scope);
					// Finally, refresh the watch expressions in the new element
					$scope.$apply();
				}]);
			}
		}

	    angular.module('MyApp', ['ngMaterial']).controller("AppCtrl", function($scope, $compile) {
			$.get(
					'gridlist_card',
					{},
					function(successData) {
						$('ul#grid > li > div.inner').first().html(successData);
						compileAngularElement($('ul#grid > li > div.inner').first());
					}
			);
		});

		var fixtures = {};
		fixtures.DEMO = [
			{w: 1, h: 1, x: 0, y: 0},
			{w: 1, h: 2, x: 0, y: 1},
			{w: 2, h: 2, x: 1, y: 0},
			{w: 1, h: 1, x: 1, y: 2},
			{w: 2, h: 1, x: 2, y: 2},
			{w: 1, h: 1, x: 3, y: 0},
			{w: 1, h: 1, x: 3, y: 1},
			{w: 1, h: 0, x: 4, y: 0},
			{w: 3, h: 1, x: 5, y: 0},
			{w: 2, h: 1, x: 5, y: 1},
			{w: 1, h: 1, x: 5, y: 2},
			{w: 2, h: 1, x: 6, y: 2},
			{w: 1, h: 1, x: 7, y: 1},
			{w: 2, h: 0, x: 8, y: 0},
			{w: 1, h: 1, x: 10, y: 0},
			{w: 1, h: 1, x: 10, y: 1},
			{w: 1, h: 1, x: 10, y: 2}
		];

		var DemoGrid = {
			currentSize: 3,
			buildElements: function($gridContainer, items) {
				var item, i;
				for (i = 0; i < items.length; i++) {
					item = items[i];
					$item = $(
							'<li>' +
							'<div class="inner">' +
							'<div class="controls">' +
							'<a href="#zoom1" class="resize" data-w="1" data-h="1">1x1</a>' +
							'<a href="#zoom2" class="resize" data-w="2" data-h="1">2x1</a>' +
							'<a href="#zoom3" class="resize" data-w="3" data-h="1">3x1</a>' +
							'<a href="#zoom1" class="resize" data-w="1" data-h="2">1x2</a>' +
							'<a href="#zoom2" class="resize" data-w="2" data-h="2">2x2</a>' +
							'</div>' +
							i +
							'</div>' +
							'</li>'
					);
					$item.attr({
						'data-w': item.w,
						'data-h': item.h,
						'data-x': item.x,
						'data-y': item.y
					});
					$gridContainer.append($item);
				}
			},
			resize: function(size) {
				if (size) {
					this.currentSize = size;
				}
				$('#grid').gridList('resize', this.currentSize);
			},
			flashItems: function(items) {
				// Hack to flash changed items visually
				for (var i = 0; i < items.length; i++) {
					(function($element) {
						$element.addClass('changed')
						setTimeout(function() {
							$element.removeClass('changed');
						}, 0);
					})(items[i].$element);
				}
			}
		};

		$(window).resize(function() {
			$('#grid').gridList('reflow');
		});

		$(function() {
			DemoGrid.buildElements($('#grid'), fixtures.DEMO);

			$('#grid').gridList({
				direction: 'vertical',
				lanes: DemoGrid.currentSize,
				widthHeightRatio: 264 / 294,
				heightToFontSizeRatio: 0.25,
				onChange: function(changedItems) {
					DemoGrid.flashItems(changedItems);
				}
			});
			$('#grid li .resize').click(function(e) {
				e.preventDefault();
				var itemElement = $(e.currentTarget).closest('li'),
						itemWidth = $(e.currentTarget).data('w'),
						itemHeight = $(e.currentTarget).data('h');

				$('#grid').gridList('resizeItem', itemElement, {
					w: itemWidth,
					h: itemHeight
				});
			});
			$('.add-row').click(function(e) {
				e.preventDefault();
				DemoGrid.resize(DemoGrid.currentSize + 1);
			});
			$('.remove-row').click(function(e) {
				e.preventDefault();
				DemoGrid.resize(Math.max(1, DemoGrid.currentSize - 1));
			});
		});
	</script>
{% endblock %}
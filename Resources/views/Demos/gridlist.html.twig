{% extends "GXAngularMaterialBundle::base.html.twig" %}

{% block title %}GXAngularMaterialBundle:Demos:gridlist{% endblock %}

{% block stylesheets %}
	{# more on https://github.com/angular/bower-material/tree/master/themes #}
	<style type="text/css">
		md-content {
			background: #444
		}
		.grid {
			position: relative;
			height: 100%;
			list-style: none;
			/* Will be modified by the grid jquery lib, depending on the items */
			-webkit-transition: width 0.2s,
			height 0.2s;
			transition: width 0.2s,
			height 0.2s;
		}
		.grid li {
			position: absolute;
			z-index: 1;
			font-weight: bold;
			line-height: 4em;
			text-align: center;
			cursor: pointer;
			-webkit-transition: top 0.2s,
			left 0.2s,
			width 0.2s,
			height 0.2s,
			font-size 0.2s,
			line-height 0.2s;
			transition: top 0.2s,
			left 0.2s,
			width 0.2s,
			height 0.2s,
			font-size 0.2s,
			line-height 0.2s;
		}
		.grid li .inner {
			position: absolute;
			background: #555;
			top: 0;
			bottom: 10px;
			left: 10px;
			right: 0;
			-webkit-transition: background 3s;
			transition: background 3s;
		}
		.grid li.changed .inner {
			background: #ffff66;
			-webkit-transition: none;
			transition: none;
		}
		.grid li.ui-draggable-dragging {
			-webkit-transition: none;
			transition: none;
		}
		.grid li.position-highlight {
			-webkit-transition: none;
			transition: none;
		}
		.grid li.position-highlight .inner {
			background: #333;
		}
	</style>
{% endblock %}

{% block body %}
<div layout="column" layout-fill style="overflow:hidden;">

	<md-toolbar md-scroll-shrink>
		<div class="md-toolbar-tools">
			<md-button class="md-icon-button" aria-label="Settings">
				<md-icon md-svg-icon="img/icons/menu.svg"></md-icon>
			</md-button>
			<h2>
				<span>Toolbar with Icon Buttons</span>
			</h2>
			<span flex></span>
			<md-button class="md-icon-button" aria-label="Favorite">
				<md-icon md-svg-icon="img/icons/favorite.svg" style="color: greenyellow;"></md-icon>
			</md-button>
			<md-button class="md-icon-button" aria-label="More">
				<md-icon md-svg-icon="img/icons/more_vert.svg"></md-icon>
			</md-button>
		</div>
	</md-toolbar>

	<md-content flex>
		<div flex ng-controller="AppCtrl">
			<ul id="grid" class="grid">
				<li class="position-highlight">
					<div class="inner md-whiteframe-1dp"></div>
				</li>
				<li class="position-card">
					<md-card class="md-whiteframe-6dp inner">
						...
					</md-card>
				</li>
			</ul>
		</div>
	</md-content>

	<md-fab-toolbar class="md-fab-bottom-right" style="width:100%" md-direction="left">
		<md-fab-trigger class="align-with-text">
			<md-button aria-label="menu" class="md-fab md-warn">
				<md-icon md-svg-src="img/icons/menu.svg"></md-icon>
			</md-button>
		</md-fab-trigger>
		<md-toolbar>
			<md-fab-actions class="md-toolbar-tools">
				<md-button aria-label="comment" class="remove-row">
					Remove row
				</md-button>
				<md-button aria-label="comment" class="add-row">
					Add row
				</md-button>
			</md-fab-actions>
		</md-toolbar>
	</md-fab-toolbar>
</div>

{% endblock %}

{% block javascripts %}
	<script>
		var app = angular.module('MyApp', ['ngMaterial']);
		app.controller("AppCtrl", function($scope, $compile) {

		});

		var fixtures = {
			DEMO: [
				{id: 1, w: 1, h: 1, x: 0, y: 0},
				{id: 2, w: 1, h: 2, x: 0, y: 1},
				{id: 3, w: 2, h: 2, x: 1, y: 0},
				{id: 4, w: 1, h: 1, x: 1, y: 2},
				{id: 5, w: 2, h: 1, x: 2, y: 2}
			]
		};

		$(function() {
			var gridStack = $('#grid').gridStack({
				matrix: fixtures.DEMO,
				onChange: function(changedItems, matrix) {
					// TODO: tests
					console.log(changedItems);
					console.log(matrix);
				},
				lanes: 6,
				elementPrototype: 'li.position-card',
				elementLoaderUrl: 'gridlist_card'
			});

			$('#grid li .resize').click(function(e) {
				e.preventDefault();
				var itemElement = $(e.currentTarget).closest('li'),
						itemWidth = $(e.currentTarget).data('w'),
						itemHeight = $(e.currentTarget).data('h');
				gridStack.resizeItem(itemElement, itemWidth, itemHeight);
			});
			$('.add-row').click(function(e) {
				e.preventDefault();
				gridStack.setLanes(gridStack.getLanes() + 1);
			});
			$('.remove-row').click(function(e) {
				e.preventDefault();
				gridStack.setLanes(gridStack.getLanes() - 1);
			});
		});
	</script>
{% endblock %}
